{
    "collab_server" : "",
    "contents" : "# Data Analysis\n\n#library(openxlsx)\n\n#set working directory (modify path as needed)\nsetwd(\"C:/SCM/MANA/Infy-NIA\")\nrm(list=ls())\n\n# Load Data\nX = read.csv(file='ship_Data.csv')\n\n# Variable transformations as required\nX$SHIPMENT_AMOUNT = as.numeric(X$SHIPMENT_AMOUNT)\n\nX$BOOKED_DATE =  as.POSIXct(X$BOOKED_DATE, format = \"%m/%d/%Y %H:%M:%S\") \nX$ROUTE_DERIVED =  as.POSIXct(X$ROUTE_DERIVED, format = \"%m/%d/%Y %H:%M:%S\")\nX$MFG_DATE = as.POSIXct(X$MFG_DATE, format = \"%m/%d/%Y %H:%M:%S\")\nX$CM_SSD  = as.POSIXct(X$CM_SSD, format = \"%m/%d/%Y %H:%M:%S\")\nX$PACKOUT_DATE  = as.POSIXct(X$PACKOUT_DATE, format = \"%m/%d/%Y %H:%M:%S\")\nX$DELIVERY_CREATED  = as.POSIXct(X$DELIVERY_CREATED, format = \"%m/%d/%Y %H:%M:%S\")\nX$PICK_RELEASED  = as.POSIXct(X$PICK_RELEASED, format = \"%m/%d/%Y %H:%M:%S\")\nX$EXPECTED_SLC_SD  = as.POSIXct(X$EXPECTED_SLC_SD, format = \"%m/%d/%Y %H:%M:%S\")\nX$ACTUAL_SLC_SD  = as.POSIXct(X$ACTUAL_SLC_SD, format = \"%m/%d/%Y %H:%M:%S\")\nX$EXPECTED_DELIVERY_DATE  = as.POSIXct(X$EXPECTED_DELIVERY_DATE, format = \"%m/%d/%Y %H:%M:%S\")\nX$DELIVERED_DATE  = as.POSIXct(X$DELIVERED_DATE, format = \"%m/%d/%Y %H:%M:%S\")\n\n# Putting all data in X_all \nX_all=X\n\n\n# Overall Summary of Data\nnames(X)\nsummary(X)\n\n# Subsetting required columns\nsummary(X$ORDER_TYPE)\nsummary(X$SHIP_TO)\nsummary(X$SHIPPING_METHOD_CODE)\nsummary(X$OPT_IN_OUT)\nsummary(X$OTM_IB_SHIPPING_ROUTE_CODE)\nsummary(X$PICK_RELEASED)\nsummary(X$EXPECTED_SLC_SD)\nsummary(X$ACTUAL_SLC_SD)\nreqd_list = c('ORDER_TYPE','SHIP_TO','SHIPPING_METHOD_CODE','OPT_IN_OUT',\n              'OTM_IB_SHIPPING_ROUTE_CODE','PICK_RELEASED', 'EXPECTED_SLC_SD', 'ACTUAL_SLC_SD')\nX_sub = X[ , which(names(X) %in% reqd_list)]\nhead(X_sub)\nsummary(X_sub)\nX_sub\n\n# Some Data Cleaning\n\n# Remove the first row with 2014 values\nX_sub = X_sub[-1,]\n\n# Remove actual SLC rows with blank(NA) values\nidxna = which(is.na(X_sub$ACTUAL_SLC_SD)!=0)\nX_sub = X_sub[-idxna,]\n\nX_sub = X_sub[order(X_sub[,6]),] # order by Pick Release Date\nhead(X_sub)\ntail(X_sub)\n\n# Remove non Standard Order Types\nsummary(X_sub$ORDER_TYPE)\nvalid_ot = c('Standard Infosys - AUS', 'Standard Infosys - CAN',  'Standard Infosys - CN', 'Standard Infosys - IN', \n             'Standard Infosys - ITL', 'Standard Infosys - JPN', 'Standard Infosys - NL',  \n             'Standard Infosys - PY', 'Standard Infosys - RUS',  'Standard Infosys - UKH',  \n             'Standard Infosys - US')\nX_sub = X_sub[X_sub$ORDER_TYPE %in% valid_ot,]\n\n# Remove low volume Shipping Method Codes\nsummary(X_sub$SHIPPING_METHOD_CODE)\nX_sub = X_sub[!(as.numeric(X_sub$SHIPPING_METHOD_CODE) %in% which(table(X_sub$SHIPPING_METHOD_CODE)<5)),]\n\n# Remove low volume Ship To values\nsummary(X_sub$SHIP_TO)\nX_sub = X_sub[!(as.numeric(X_sub$SHIP_TO) %in% which(table(X_sub$SHIP_TO)<=5)),]\n\n\n# Find number of minutes taken from Pick Release to SLC_SD\nX_sub$EXP_PICKTOSLC= as.numeric(X_sub$EXPECTED_SLC_SD - X_sub$PICK_RELEASED)\nX_sub$ACT_PICKTOSLC= as.numeric(X_sub$ACTUAL_SLC_SD - X_sub$PICK_RELEASED)\n\n\n#A. Create Regression model to predict number of minutes to SLC_SD\n# Create training and test data sets\nsummary(X_sub)\nreqd_list2 = c('ORDER_TYPE','SHIP_TO','SHIPPING_METHOD_CODE','OPT_IN_OUT',\n               'OTM_IB_SHIPPING_ROUTE_CODE','ACT_PICKTOSLC')\n\nX= X_sub[ , which(names(X_sub) %in% reqd_list2)]\nY= X_sub$ACT_PICKTOSLC  # column for prediction\nY_EXP=X_sub$EXP_PICKTOSLC # To compare against expected\ntrain=1:41000 # approx 80% of data\n\ntest.X=X[-train,]\ntest.Y=Y[-train]\ntest.Yexp = Y_EXP[-train]\n\n# A1. Linear Regression\n\nlm.fit=lm(ACT_PICKTOSLC~. , data=X, subset = train)\n#lm.fit\n#summary(lm.fit)\n\n#Prediction\ndhlna = which(is.na(test.X$SHIPPING_METHOD_CODE) == \"00001_DHLC_A_EXPRESS-TP\")\ntest.X = test.X[-dhlna,]\noutput.lm=predict( lm.fit, test.X )\n#output.lm1 = cbind(test.X$ACT_PICKTOSLC,output.lm)\n\n# Accuracy\n# RMSE\ncat( \" MSE - Regression prediction vs actuals \" ,mean((test.X$ACT_PICKTOSLC - output.lm)^2))\ncat( \" MSE - Expected SLC vs actuals \" ,mean((test.X$ACT_PICKTOSLC - test.Yexp)^2))\n\n\n#RMSPE\n# Expected vs Actuals\n\ne1 = (test.X$ACT_PICKTOSLC - test.Yexp)/test.X$ACT_PICKTOSLC\ne2=sum(e1^2)/length(test.X$ACT_PICKTOSLC)\nrmspe_exp=sqrt(e2)*100\n\nr1 = (test.X$ACT_PICKTOSLC - output.lm)/test.X$ACT_PICKTOSLC\nr2=sum(r1^2)/length(test.X$ACT_PICKTOSLC)\nrmspe_reg=sqrt(r2)*100\n\nrmspe_lm = rmspe_reg\ncat( \" RMSPE Linear Regression \" , rmspe_lm)\n\n\nmean(X_sub$EXP_PICKTOSLC / X_sub$ACT_PICKTOSLC)\n\n# A2. MARS ( Regression Splines)\n\nlibrary(earth)\n\n# fit model\nmars.fit = earth(ACT_PICKTOSLC~. , data=X, subset = train)\n# summarize the fit\nsummary(mars.fit)\n# summarize the importance of input variables\nevimp(mars.fit)\n# make predictions\noutput.mars = predict(mars.fit, test.X)\n#rbind(y$Prediction,t(output.mars))\n\n# Accuracy\n# RMSE\ncat( \" MSE - Regression prediction vs actuals \" ,mean((test.X$ACT_PICKTOSLC - output.mars)^2))\ncat( \" MSE - Expected SLC vs actuals \" ,mean((test.X$ACT_PICKTOSLC - test.Yexp)^2))\n\n#RMSPE\n\nr1 = (test.X$ACT_PICKTOSLC - output.mars)/test.X$ACT_PICKTOSLC\nr2=sum(r1^2)/length(test.X$ACT_PICKTOSLC)\nrmspe_reg=sqrt(r2)*100\n\nrmspe_mars = rmspe_reg\ncat( \" RMSPE MARS \" , rmspe_mars)\n\n# A3. NEURAL NETWORK\n\nlibrary(nnet)\n# fit model\nnn.fit = nnet(ACT_PICKTOSLC~., data=X, subset = train, size=4, maxit=500000, linout= T, decay=0.01)\n# make predictions\noutput.nn = predict(nn.fit, test.X, type=\"raw\")# summarize the fit\n\n# Accuracy\n# RMSE\ncat( \" MSE - Regression prediction vs actuals \" ,mean((test.X$ACT_PICKTOSLC - output.nn)^2))\ncat( \" MSE - Expected SLC vs actuals \" ,mean((test.X$ACT_PICKTOSLC - test.Yexp)^2))\n\n#RMSPE\n\nr1 = (test.X$ACT_PICKTOSLC - output.nn)/test.X$ACT_PICKTOSLC\nr2=sum(r1^2)/length(test.X$ACT_PICKTOSLC)\nrmspe_reg=sqrt(r2)*100\n\nrmspe_nn = rmspe_reg\ncat( \" RMSPE NN \" , rmspe_nn)\n\n\n# Handling level count problem for Decision Tree and Random Forest \n#- identify columns with high factors\nnames(X)\nX1=X\nsort(table(X1$ORDER_TYPE))#ok \nsort(table(X1$OPT_IN_OUT))#ok\nsort(table(X1$SHIPPING_METHOD_CODE))\nsort(table(X1$SHIP_TO))\nsort(table(X1$OTM_IB_SHIPPING_ROUTE_CODE))#ok\n\nX1 = X1[!(as.numeric(X1$SHIPPING_METHOD_CODE) %in% which(table(X1$SHIPPING_METHOD_CODE)<40)),]\nX1 = X1[!(as.numeric(X1$SHIP_TO) %in% which(table(X1$SHIP_TO)<70)),]\nX1[] = lapply(X1, function(x) if(is.factor(x)) factor(x) else x) # remove redundant levels\n\n\nY1= X1$ACT_PICKTOSLC  # column for prediction\ntrain1=1:41000 # approx 80% of data\ntest.X1=X1[-train,]\ntest.Y1=Y1[-train]\n\n# Check that levels of the 2 columns are less than 30 for tree based algorithms\nlevels(X1$SHIPPING_METHOD_CODE)\nlevels(X1$SHIP_TO)\n\n# A4. DECISION TREE\n\nlibrary(tree)\n\n# fit model\ntree.fit = tree(ACT_PICKTOSLC~., data=X1, subset = train1)\n# make predictions\noutput.tree = predict(tree.fit, test.X1)# summarize the fit\nplot(tree.fit)\ntext(tree.fit,pretty=0)\n\n\n# Accuracy\n# RMSE\ncat( \" MSE - Regression prediction vs actuals \" ,mean((test.X1$ACT_PICKTOSLC - output.tree)^2))\n\n#RMSPE\n\nr1 = (test.X1$ACT_PICKTOSLC - output.tree)/test.X1$ACT_PICKTOSLC\nr2=sum(r1^2)/length(test.X1$ACT_PICKTOSLC)\nrmspe_reg=sqrt(r2)*100\nrmspe_tree = rmspe_reg\ncat( \" RMSPE Decision Tree \" , rmspe_tree)\n\n# A5. RANDOM FOREST\n\nlibrary(randomForest)\n\n\n# fit model\nrf.fit=randomForest(ACT_PICKTOSLC~., data=X1, subset = train1, mtry=5, importance=TRUE)  \n# make predictions\noutput.rf = predict(rf.fit, test.X1)# summarize the fit\nplot(rf.fit)\n\n# Accuracy\n# RMSE\ncat( \" MSE - Regression prediction vs actuals \" ,mean((test.X1$ACT_PICKTOSLC - output.rf)^2))\n\n#RMSPE\n\nr1 = (test.X1$ACT_PICKTOSLC - output.rf)/test.X1$ACT_PICKTOSLC\nr2=sum(r1^2)/length(test.X1$ACT_PICKTOSLC)\nrmspe_reg=sqrt(r2)*100\nrmspe_rf = rmspe_reg\ncat( \" RMSPE Random Forest \" , rmspe_rf)\n\n\n# A6. MEAN BASED MODEL\nmean_table = aggregate(X1$ACT_PICKTOSLC, FUN=mean, \n                       by=list(ORDER_TYPE = X1$ORDER_TYPE, OPT_IN_OUT = X1$OPT_IN_OUT, SHIPPING_METHOD_CODE = X1$SHIPPING_METHOD_CODE , \n                               SHIP_TO = X1$SHIP_TO, \n                               OTM_IB_SHIPPING_ROUTE_CODE = X1$OTM_IB_SHIPPING_ROUTE_CODE))\nclass(mean_table)\nnames(mean_table)\n\nsum(test.X1[1,1:5]==test.X1[3,1:5])\n\nhead(test.X1)\ntest_count = dim(test.X1)[1]\nmean_table_count = dim(mean_table)[1]\noutput.mean=rep(0,test_count)\n\n# Warning : This is a bit slow\nfor (rowt in 1:test_count){\n  if (rowt%%100==0) {\n    cat('\\nRow',rowt)\n  }\n  \n  for (rowm in 1:mean_table_count){\n    #print(sum(test.X1[rowt,1:5]==mean_table[rowm,1:5])== 5)\n    #cat('rowm',rowm)\n    if (sum(test.X1[rowt,1:5]==mean_table[rowm,1:5])== 5){\n      output.mean[rowt]=mean_table[rowm,6]\n      break\n    }\n  }\n}\n\nr1 = (test.X1$ACT_PICKTOSLC - output.mean)/test.X1$ACT_PICKTOSLC\nr2=sum(r1^2)/length(test.X1$ACT_PICKTOSLC)\nrmspe_reg=sqrt(r2)*100\nrmspe_mean = rmspe_reg\ncat( \" RMSPE Mean Based Model \" , rmspe_mean)\n\n\n\n",
    "created" : 1501796289385.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4233595492",
    "id" : "E7EB3BBC",
    "lastKnownWriteTime" : 1502135389,
    "last_content_update" : 1502138869990,
    "path" : "C:/SCM/MANA/Infy-NIA/OTSOTD/Ship.R",
    "project_path" : "Ship.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}